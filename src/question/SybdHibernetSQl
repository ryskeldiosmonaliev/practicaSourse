 /**
     * 1) Маалымыт базасы деген эмне?
     * 1- Маалымат базасына структура т?р?нд?
     * маалыматты сактоо жана иштет??г? м?мк?нд?к
     * берген программа.
     *
     * 2)
     * СУБД (DBMS) -
     * Система управления базами
     * данных
     *-- Маалыматтарды сактайт
     * --Маалыматтарды алат
     * --Маалыматтар менен иштейт
     * --Маалымат базасы коп таблицадан
     * турат
     *
     * Маалымат базасынын кандай турлору бар?
     * --Реляционные базы данных.
     * --Объектно-ориентированные базы данных.
     * Р--аспределенные базы данных.
     * ---Хранилища данных.
     * ---Базы данных NoSQL.
     * --Графовые базы данных.
     * ---Базы данных OLTP.
     *
     * СУБД - бизге керектуу маалыматтарды
     * сактап,алар менен бизнес логикага
     * жараша иштоо.
     * Маалыматты алуу (select) жана кошуу
     * (insert)бат ишке ашуусу керек.
     * Маалымат туура сакталышы керек
     * (transaction)
     *
     * Релиационная база данных- SQL (Structured Query
     * Language) тилин колдонуп маалыматты
     * манипуляция кылабыз. РСУБДларда SQL
     * синтаксиси айырмаланышы мумкун, бирок аны
     * тушунуп кетуу бизге кыйын деле болбойт. РСУБД
     * колдонуу 1970-жылы IBM'де иштеген доктор Edgar
     * Frank Codd тарабынан сунушталган. Биз коп
     * колдонулган, популярдуу, бекер жана
     * азыркыучурда абдан бат онугуп жаткан
     * PostgreSQL'ди уйронобуз.
     *
     * Data Definition Language (DDL)
     * Data Manipulating Language (DML)
     * Transaction Control Language (TCL)
     * Data Control Language (DCL)
     *
     * Таблицаларды тузобуз (DDL).
     * Маалымат киргизебиз,
     * озгортобуз, алабыз же очуробуз
     * (DML).
     * Транзакционность менен
     * иштейбиз (TCL).
     *
     * DDL- Таблицаларды тузуу, озгортуу, очуруу
     * Create table - таблицаны тузуу
     * Alter table - таблицаны озгортуу
     * Drop table - таблицаны очуруу
     *
     *
     * DML-
     * INSERT INTO table1 (field1)
     * VALUES ('some_value') - сактоо
     * UPDATE table1
     * SET field1 = 'other_value' - озгортуу
     * DELETE FROM table1 - очуруу
     *
     *
     * Select и его команды
     * WHERE - фильтр.
     * JOIN (inner, outer(left, right, full),cross))
     * - таблицаларды кошуу
     * GROUP BY- мааниси бирдей саптарды
     * топтойт (группировка).
     * HAVING - фильтр по группировке.
     * ORDER BY - сортировка.
     * LIMIT - чектоо.
     *
     *
     * Маалыматтарды таблицадан чыгарып жатканда аларды фильтрация
     * кылуу учун where деген оператор колдонулат андан кийин шарт коюлат да
     * ошол шартка жараша фильтрация болот.
     * where шарт
     * Эгерде шарт туура болсо анда маалыматтар чыгуучу жерге кошулуп калат
     *
     * логикалык операторлор AND OR NOT  is null
     *
     * LIKE оператору соз айкашына дал келиши керек болгон сап улгусун кабыл
     * алат.
     * SELECT * FROM products
     * WHERE productName LIKE '_Phone%';
     *
     * DISTINCT оператору белгил?? столбецтер учун уникалдуу маалыматтарды
     * тандоого мумкундук берет.
     *
     * ORDER BY оператору маалыматтарду белгилуу бир столбец боюнча
     * сортировка кылууга мумкундук берет.
     *
     * ORDER BY users DECT
     *  маалыматтар осуу тартибинде сортировка болот, бирок сиз
     * DESC операторун колдонуп, азайып бараткан ирет менен сортировка кыла
     * аласыз
     *
     * LIMIT оператору белгил?? бир олчомдо маалыматтарды алууга мумкундук
     * берет
     *
     * LIMIT оператору белгил?? бир олчомдо маалыматтарды алууга мумкундук
     * берет
     *
     * IN оператору столбецтер ээ болуучу маанилердин жыйындысын аныктоого
     * мумкундук берет:
     *
     * BETWEEN оператору соз айкашына дал келиши керек болгон баштапкы
     * жана акыркы маанилерди колдонуп, бир катар маанилерди аныктайт.
     *
     *Avg функциясы таблицанын столбециндеги орточо маанини кайтарат.
     * Сум функциясы столбецтеги маанилердин суммасын эсептейт.
     * SELECT AVG(price) AS average_price FROM products;
     * SELECT SUM(productCount) FROM products;
     *
     * Count функциясы строкалардын количествосун чыгарып берет.
     * Min жана Max функциялары столбецтеги минималдуу жана максималдуу
     * маанилерин кайтарып берет.
     * SELECT COUNT(*) FROM products;
     * SELECT MIN(price) FROM products;
     * SELECT MAX(price) FROM products;
     *
     * GROUP BY
     * GROUP BY оператору катарлардын кантип группировка боло тургандыгын
     * аныктайт.
     * SELECT company, COUNT(*) AS modelsCount
     * FROM products
     * GROUP BY company;
     *
     *Maven — инструмент для автоматизации сборки проектов.
     *
     * Java менен Субд арасындагы байланыш
     * Драйверлер аркылуу каалаган Субдны туташтырууга жана иштоого
     * мумкунчулук берет.
     * Драйверлерди Субднын иштеп чыгуучулары камсыз кылат (аларды
     * сайттарынан, Oracle сайтынан жуктоп алсаныз болот).
     * Драйверлер - бул .jar файлдар
     *
     *Connection (БД-га кошулуу)
     * Statement (SQL запрос)
     * Execute Statement-а (SQL-ди аткаруу)
     * ResultSet (SQL аткарылгандан кийинки жооп)
     * Connection-ди жабуу
     *
     *Driver
     * Connection
     *      Open connection
     * Statement
     *          Execute statement
     * ResultSet
     *      .next()
     *      .get...()
     * Close Connection
     *
     * Connection деген эмне?
     * Эсиниздердеби, javaда баары, прям баары объекттер. Connection дагы
     * объект.
     * Драйверге кайрылып, туташууга аракет кылып жатат. Кир?? учун url, login
     * жана password талап кылынат.
     * jdbc:postgresql://localhost:5432/peaksoft
     *
     *
     * Statement деген эмне?
     * Statement - sql запрос
     * Уч туру бар:
     * Statement (SQL параметрсиз)
     * CallableStatement (процедура, функцияларды Субд-
     * дан чакыруу)
     * PreparedStatement (SQL параметрлер менен)
     *
     *
     * Базага запрос кылуу (execute)
     * Уч туру бар:
     * execute – запрос кылуу, true – эгерде жооп келсе
     * executeQuery – запрос кылуу, результат -
     * ResultSet
     * executeUpdate – insert, update, delete
     * кылуу. Результат – озгоргон иштердин количествосу.
     *
     *
     * Маалыматтарды алуу(ResultSet)
     * Java Бд-дан алган маалыматтар.
     * Мындан ары колдонуу ?ч?н, аларды туура сактоо керек.
     * Маалыматтарды столбецтин индекси же аты менен алууга болот. SQL
     * кайтып келген маалыматтын тиби менен чакыруу керек
     * getInt(0), getString(“pole1”), getDouble(2) ж.б
     * next() методу кийинки жазууну окууга мумкунчулук берет.
     *
     * Connection-ди жабуу керек
     * Запрос аяктагандан кийин, connection-ди жабышыныз керек. 2 негизги
     * жолу бар.
     * сlose() Connection-дин методу аркылуу жабуу;
     * Байланышты автоматтык турдо жабылып тургандай кылып ачыныз
     * (try-catch with resources). Биздин мисалда ушул жолу колдонулду.
     * Connection жабылбаса каталарды алып келиши мумкун, аларды издоо
     * кыйынга турат!
     *
     *ORM (Object-to-Relational Mapping) – это
     * преобразование объекта в строку в таблице
     * и обратное преобразование.
     *
     * Hibernate - бул Java обьектилерин тузуу, алуу, озгортуу
     * жана БДдан очуруу учун колдонулган фреймворк.
     *
     * CREATE - команда INSERT
     * • READ - команда SELECT
     * • UPDATE - команда UPDATE
     * • DELETE - команда DELETE
     *
     *     Hibernete    Класс менен таблицанын байланышын
     * эки жол менен конфигурация кылса болот:
     * XML файл жардамы
     * менен
     * Java аннотаций жардамы
     * менен
     *
     *
     * hibernate.cfg.xml
     *
     * hibernate.connection.driver_class - БДнын драйверин суроттогон класс.
     * hibernate.connection.url - БДга кошулуу сабы.
     * hibernate.dialect - диалект(оракл, постгре, мс-скл).
     * hibernate.hbm2ddl.auto - DB журум-турум варианты(таблицаларды тузуу,
     * тузбоо, очуруу жана башка).
     * show_sql - консольго кандай sql операциялар болуп жатканын корсотуу.
     * mapping class - бул жерде БД менен иштеген баардык класстар
     * корсотулот
     *
     * HIBERNATE
     * JPA (Java Persistence API) – это стандартная
     * спецификация, которая описывает систему для
     * управления сохранением Java объектов в
     * таблицы базы данных.
     * Hibernate – самая популярная
     * реализация спецификации JPA
     * Таким образом JPA описывает
     * правила, а Hibernate реализует их.
     *
     * Entity класс – это Java класс, который отображает
     * информацию определённой таблицы в Базе Данных.
     * Entity класс – это POJO класс, в котором мы используем
     * определённые Hibernate аннотации для связи класса с
     * таблицей из базы.
     * POJO (Plain Old Java Object) – класс, удовлетворяющий
     * ряду условий:
     * private поля, getter-ы и setter-ы, конструктор без
     * аргументов и т.д.
     *
     *
     * Аннотация @Entity говорит о том, что данный класс будет иметь
     * отображение в базе данных
     * Аннотация @Table говорит о том, к какой именно таблице мы
     * привязываем класс
     * Аннотация @Column говорит о том, к какому именно столбцу
     * из таблицы мы привязываем поле класса
     * Аннотация @Id говорит о том, что в таблице, столбец связанный
     * с данным полем является Primary Key
     *
     * HIBERNATE
     * Столбец с Primary Key содержит уникальное значение и не
     * может быть null.
     * Аннотация @GeneratedValue - описывает стратегию по генерации значений
     * для столбца с Primary Key.
     * GenerationType.AUTO – дефолтный тип. Выбор стратегии будет зависеть от
     * типа базы, с которой мы работаем.
     * GenerationType.IDENTITY полагается на автоматическое увеличение столбца
     * по правилам, прописанным в БД-х.
     * GenerationType.SEQUENCE полагается на работу Sequence, созданного в БД-х.
     * GenerationType.TABLE полагается на значение столбца таблицы БД- х. Цель
     * такой таблицы – поддержка уникальности значений
     *
     * • SessionFactory читает файл hibernate.cfg.xml
     * После чего SessionFactory знает, как должны создаваться
     * сессии.
     * • В Java приложении достаточно создать объект
     * SessionFactory 1 раз и затем можно его переиспользовать
     *
     * Session – это обёртка вокруг подключения к
     * базе с помощью JDBC.
     * Session мы получаем с помощью SessionFactory
     * Session – это основа для работы с Базой Данных.
     * Именно с помощью Session мы будем добавлять,
     * получать и делать другие операции с Java
     * Объектами в Базе Данных.
     * Жизненный цикл Session обычно не велик. Мы
     * получаем Session, делаем с помощью неё
     * определённые операции и она становится не
     * нужной.
     *
     * 1. Что такое JPA?
     * JPA (Java Persistence API) это спецификация Java EE и Java SE,
     * описывающая систему управления сохранением java объектов в таблицы реляционных баз данных в удобном виде.
     * Сама Java не содержит реализации JPA, однако есть существует много реализаций данной спецификации от разных компаний (открытых и нет).
     * Это не единственный способ сохранения java объектов в базы данных (ORM систем), но один из самых популярных в Java мире.
     * 2. Что такое ORM?
     * ORM (англ. Object-Relational Mapping, рус. объектно-реляционное отображение, или преобразование) —
     * технология программирования, которая связывает базы данных с концепциями объектно-ориентированных языков программирования,
     * создавая «виртуальную объектную базу данных».
     * 3. Что такое Hibernate?
     * Hibernate — библиотека для языка программирования Java,
     * предназначенная для решения задач объектно-реляционного отображения (ORM),
     * самая популярная реализация спецификации JPA. Распространяется свободно на условиях GNU Lesser General Public License.
     * 4. В чем разница между JPA и Hibernate? Как связаны все эти понятия?
     * Hibernate одна из самых популярных открытых реализаций последней версии спецификации (JPA 2.1).
     * Даже скорее самая популярная, почти стандарт де-факто. То есть JPA только описывает правила и API,
     * а Hibernate реализует эти описания, впрочем у Hibernate (как и у многих других реализаций JPA) есть дополнительные возможности,
     * не описанные в JPA (и не переносимые на другие реализации JPA).
     * 5. Какие классы/интерфейсы относятся к JPA/Hibernate?
     * EntityManagerFactory
     * Query
     * 6. Основные аннотации Hibernate, рассказать.
     * @Entity @Table @Id @GeneratedValue @Column @ManyToMany, @ManyToOne, OneToMany
     * 7. Чем HQL отличается от SQL?
     * HQL(Hibernate Query Language)
     *
     * Отличие между HQL и SQL состоит в том, что SQL работает таблицами в базе данных (далее – БД) и их столбацами,
     * а HQL – с сохраняемыми объектами (Persistent Objects) и их полями (аттрибутами класса).
     *
     * HQL это аналог SQL в мире Hibernate, ориентированный на запросы не к таблицам, а к классам.
     * Язык структурированного запроса, также широко известный как SQL, является языком базы данных,
     * который использует концепцию управления реляционными базами данных для управления данными. Управление данными включает выбор
     * (извлекает данные из одной или нескольких таблиц), вставляет (добавляет одну или несколько строк в таблицу), обновляет (отвечает за изменение значения одной или нескольких строк в таблице),
     * удаляет ( ответственный за удаление одной или нескольких строк в таблице) и создание схемы по запросам.
     *
     * HQL или Hibernate Query Language, расширяет концепцию объектно-ориентированного программирования до существующего SQL.
     *
     * SQL основан на модели реляционной базы данных, тогда как HQL представляет собой комбинацию объектно-ориентированного
     * программирования с концепциями реляционных баз данных.
     *
     * SQL управляет данными, хранящимися в таблицах, и изменяет их строки и столбцы. HQL обеспокоен объектами и его свойствами.
     *
     * HQL работает с классами и их свойствами, чтобы окончательно отобразиться в структуру таблицы, SQL работает с таблицами и столбцами,
     * чтобы манипулировать данными, хранящимися в них.
     *
     * HQL поддерживает такие понятия, как полиморфизм, наследование, ассоциация.
     * 8. Что такое Query? Как передать в объект Query параметры?
     * 9. Какие можно устанавливать параметры в hbm2ddl, рассказать про каждый из них.
     * 10. Требования JPA к Entity-классам? Не менее пяти.
     * Entity класс должен быть отмечен аннотацией Entity или описан в XML файле конфигурации JPA;
     * 2) Entity класс должен содержать public или protected конструктор без аргументов (он также может иметь конструкторы с аргументами);
     * 3) Entity класс должен быть классом верхнего уровня (top-level class) - не вложенный;
     * 4) Entity класс не может быть enum или интерфейсом;
     * 5) Entity класс не может быть финальным классом (final class);
     * 6) Entity класс не может содержать финальные поля или методы, если они участвуют в маппинге (persistent final methods or persistent final instance variables);
     * 7) Если объект Entity класса будет передаваться по значению как отдельный объект (detached object), например через удаленный интерфейс (through a remote interface), он так же должен реализовывать Serializable интерфейс;
     * 8) Поля Entity класс должны быть напрямую доступны только методам самого Entity класса и не должны быть напрямую доступны другим классам, использующим этот Entity. Такие классы должны обращаться только к методам (getter/setter методам или другим методам бизнес-логики в Entity классе);
     * 9) Entity класс должен содержать первичный ключ, то есть атрибут или группу атрибутов которые уникально определяют запись этого Entity класса в базе данных
     * 11. Жизненный цикл Entity в Hibernate? Рассказать.
     * 1) new — объект создан, но при этом ещё не имеет сгенерированных первичных ключей и пока ещё не сохранен в базе данных;
     *
     * 2) managed — объект создан, управляется JPA, имеет сгенерированные первичные ключи;
     *
     * 3) detached — объект был создан, но не управляется (или больше не управляется) JPA;
     *
     * 4) removed — объект создан, управляется JPA, но будет удален после commit'a транзакции;
     *
     * В чем разница между JPA и Hibernate? Как связаны все эти понятия?
     *
     * Смотри выше + JPA - это набор интерфейсов, Hibernate - это набор классов, которые реализуют JPA интерфейсы.
     *
     * Hibernate одна из самых популярных открытых реализаций последней версии спецификации. JPA только описывает правила и API, а Hibernate реализует эти описания, впрочем у Hibernate (как и у многих других реализаций JPA) есть дополнительные возможности, не описанные в JPA (и не переносимые на другие реализации JPA).
     *
     *
     * Какие классы/интерфейсы относятся к JPA/Hibernate?
     *
     * EntityManagerFactory — это встроенный интерфейс JPA. Он может быть создан с помощью класса Persistence, указав название блока сохранения из файла .xml сохранения. Вышеупомянутый код создает emf EntityManagerFactory, ссылаясь на единицу сохранения PERSISTENCE. EntityManagerFactory специфичен для базы данных. Итак, если вы хотите подключиться к другой базе данных, необходимо создать другой экземпляр EntityManagerFactory. EntityManagerFactory может быть использован для создания экземпляров EntityManager.
     * EntityManager также является встроенным интерфейсом JPA. Он может быть создан с помощью экземпляра EntityManagerFactory. Код выше создает EntityManager экземпляр EM через EntityManagerFactory экземпляр emf. EntityManager представляет собой соединение базы данных. Вы можете использовать его для выполнения операций с базой данных, таких как вставка/обновление/удаление или запрос таблицы. Вышеупомянутый код вызывает метод PERSISTENCE для сохранения записи Fruit в таблице Fruit.
     * EntityTransaction также является встроенным интерфейсом JPA. Он может быть создан с помощью EntityManager. Код выше создает экземпляр EntityTransaction и через entityManager экземпляр EM. Сделка EntityTransaction инкапсулирует транзакцию базы данных. Вызов к методу начала транзакции и вызов для совершения сохраняет изменения в базе данных.
     *
     * Query Запрос также является встроенным интерфейсом JPA. Он может быть создан с помощью EntityManager. Код выше создает Typed'y (который является под-интерфейс запроса) пример запроса через EntityManager экземпляр EM. Запрос можно использовать для выполнения запроса базы данных. В вышеуказаном коде используется запрос для получения всех записей Fruit. Интерфейс запроса имеет методы, которые для получения результатов выполнения запроса.
     *
     * Основные аннотации Hibernate, рассказать.
     *
     * @Entity Эта аннотация указывает Hibernate, что данный класс является сущностью (entity bean). Такой класс должен иметь конструктор по-умолчанию (пустой конструктор).
     *
     * Сущность является простым классом POJO (POJO (англ. Plain Old Java Object) — «старый добрый Java-объект», простой Java-объект, не унаследованный от какого-то специфического объекта и не реализующий никаких служебных интерфейсов сверх тех, которые нужны для бизнес-модели) , который соответствует таблице базы данных. Он должен иметь поля, соответствующие столбцам таблицы баз данных. определённые требования:
     *
     * Наличие публично доступного конструктора без аргументов
     *
     * Класс, его методы и сохраняемые поля не должны быть final
     *
     *  Если объект Entity класса будет передаваться по значению как отдельный объект (detached object), например через удаленный интерфейс (through a remote interface), он так же должен реализовывать Serializable интерфейс.
     *
     * Сохраняемые поля должны быть доступны только с использованием методов класса.
     *
     * @Table
     *
     * С помощью этой аннотации мы говорим Hibernate,  с какой именно таблицей необходимо связать (map) данный класс. Аннотация @Table имеет различные аттрибуты, с помощью которых мы можем указать имя таблицы, каталог, БД и уникальность столбцов в таблец БД.
     *
     * @Id
     *
     * С помощью аннотации @Id мы указываем первичный ключ (Primary Key) данного класса.
     *
     * @GeneratedValue
     *
     * Эта аннотация используется вместе с аннотацией @Id и определяет такие паметры, как strategy и generator
     *
     * @Column
     *
     * Аннотация @Column определяет к какому столбцу в таблице БД относится конкретное поле класса (аттрибут класса).
     *
     * @ManyToMany, @ManyToOne, OneToMany
     *
     * Диаграммы отношений сущностей, которая показывает связь "многие ко многим" между двумя сущностями
     *
     *
     * Чем HQL отличается от SQL?
     *
     * HQL(Hibernate Query Language)
     *
     * Отличие между HQL и SQL состоит в том, что SQL работает таблицами в базе данных (далее – БД) и их столбацами, а HQL – с сохраняемыми объектами (Persistent Objects) и их полями (аттрибутами класса).
     *
     * HQL это аналог SQL в мире Hibernate, ориентированный на запросы не к таблицам, а к классам.
     * Язык структурированного запроса, также широко известный как SQL, является языком базы данных, который использует концепцию управления реляционными базами данных для управления данными. Управление данными включает выбор (извлекает данные из одной или нескольких таблиц), вставляет (добавляет одну или несколько строк в таблицу), обновляет (отвечает за изменение значения одной или нескольких строк в таблице), удаляет ( ответственный за удаление одной или нескольких строк в таблице) и создание схемы по запросам.
     *
     * HQL или Hibernate Query Language, расширяет концепцию объектно-ориентированного программирования до существующего SQL.
     *
     * SQL основан на модели реляционной базы данных, тогда как HQL представляет собой комбинацию объектно-ориентированного программирования с концепциями реляционных баз данных.
     *
     * SQL управляет данными, хранящимися в таблицах, и изменяет их строки и столбцы. HQL обеспокоен объектами и его свойствами.
     *
     * HQL работает с классами и их свойствами, чтобы окончательно отобразиться в структуру таблицы, SQL работает с таблицами и столбцами, чтобы манипулировать данными, хранящимися в них.
     *
     * HQL поддерживает такие понятия, как полиморфизм, наследование, ассоциация.
     *
     *
     * Что такое Query? Как передать в объект Query параметры? это объект, содержащий себе HQL код.
     *
     * Объектно-ориентированное представление запроса Hibernate. Запроса экземпляра получается вызовом Session.createQuery () . Этот интерфейс предоставляет некоторые дополнительные функции, помимо тех, которые предоставляются Session.iterate () и Session.find () :
     *
     * конкретная страница набора результатов может быть выбрана путем вызова setMaxResults (), setFirstResult ()
     *
     * могут использоваться именованные параметры запроса
     *
     * результаты могут быть возвращены как экземпляр ScrollableResults.
     *
     * Session.createQuery(java.lang.String).ScrollableResults Далее еще примеры методов
     *
     *  int
     *
     * executeUpdate()
     *           Execute the update or delete statement.
     *
     *  String[]
     *
     * getNamedParameters()
     *           Return the names of all named parameters of the query.
     *
     *  String
     *
     * getQueryString()
     *           Get the query string.
     *
     *  String[]
     *
     * getReturnAliases()
     *           Return the HQL select clause aliases (if any)
     *
     *  Type[]
     *
     * getReturnTypes()
     *           Return the Hibernate types of the query result set.
     *
     *  Iterator
     *
     * iterate()
     *           Return the query results as an Iterator.
     *
     *  List
     *
     * list()
     *           Return the query results as a List.
     *
     *  ScrollableResults
     *
     * scroll()
     *           Return the query results as ScrollableResults.
     * 1   2   3
     */